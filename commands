#!/bin/bash
set -e;

# Check if name is specified
if [[ $1 == couchdb:* ]]; then
    if [[ -z $2 ]]; then
        echo "You must specify an app name"
        exit 1
    else
        APP="$2"
        # Check if app exists with the same name
        if [[ -d "$DOKKU_ROOT/$APP" ]]; then
            APP_EXISTS=true
        else
            APP_EXISTS=false
        fi
    fi
fi

# Create .couchdb directory if does not exist
if [[ ! -d $DOKKU_ROOT/.couchdb ]]; then
    mkdir -p $DOKKU_ROOT/.couchdb
    chown -R dokku: $DOKKU_ROOT/.couchdb
fi

case "$1" in

  couchdb:create)
    DB_IMAGE=couchdb/$APP
    # Check if DB container is installed
    IMAGE=$(docker images | grep "klaemo/couchdb" |  awk '{print $3}')
    if [[ -z $IMAGE ]]; then
        echo "couchdb image not found... Did you run 'dokku plugins-install' ?"
        exit 1
    fi
    # Check if an existing DB volume exists
    if [[ -f "$DOKKU_ROOT/.couchdb/volume_$APP" ]]; then
        VOLUME="`cat $DOKKU_ROOT/.couchdb/volume_$APP`:/usr/local/var/lib/couchdb"
        echo
        echo "-----> Reusing couchdb/$APP database"
    else
        VOLUME="/usr/local"
        # Generate a random password for DB user
        DB_PASSWORD=$(< /dev/urandom tr -dc A-Za-z0-9 | head -c 16)
        echo $DB_PASSWORD > "$DOKKU_ROOT/.couchdb/pwd_$APP"
        chown dokku: "$DOKKU_ROOT/.couchdb/pwd_$APP"
        chmod 700 "$DOKKU_ROOT/.couchdb/pwd_$APP"
    fi
    # Stop existing container with the same persistent DB
    ID=$(docker ps | grep "$DB_IMAGE":latest |  awk '{print $1}')
    if [[ ! -z "$ID" ]]; then
        docker stop $ID > /dev/null
    fi
    # Fork DB image
    ID=$(docker run -d klaemo/couchdb exit 0)
    docker wait $ID > /dev/null
    IMAGE=$(docker commit $ID)
    docker tag $IMAGE $DB_IMAGE
    # Launch container
    ID=$(docker run -v $VOLUME -p 5984 -d $DB_IMAGE /opt/start_couch $DB_PASSWORD)
    sleep 4
    # Store persistent volume
    if [[ ! -f "$DOKKU_ROOT/.couchdb/volume_$APP" ]]; then
        VOLUME_PATH=$(docker inspect $ID | grep /var/lib/docker/vfs/dir/ | awk '{print $2}' | sed -e's/"//g')
        if [[ -z $VOLUME_PATH ]]; then
            echo "Your docker version is too old, please update it"
            exit 1
        fi
        echo $VOLUME_PATH > "$DOKKU_ROOT/.couchdb/volume_$APP"
    fi
    # Write port for further usage
    PORT=$(docker port $ID 3306 | sed 's/0.0.0.0://')
    echo $PORT > "$DOKKU_ROOT/.couchdb/port_$APP"
    # Link to a potential existing app
    dokku couchdb:link $APP $APP
    echo
    echo "-----> couchdb container created: $DB_IMAGE"
    sleep 1
    dokku couchdb:info $APP
    ;;

  couchdb:delete)
    DB_IMAGE=couchdb/$APP
    ID=$(docker ps -a | grep "$DB_IMAGE":latest |  awk '{print $1}')
    # Stop the container
    if [[ ! -z $ID ]]; then
        docker kill $ID > /dev/null
        sleep 1
        docker rm $ID > /dev/null
        sleep 1
    fi
    # Remove image
    IMAGE=$(docker images | grep "$DB_IMAGE " |  awk '{print $1}')
    if [[ ! -z $IMAGE ]]; then
        docker rmi $IMAGE > /dev/null
    fi
    # Remove container port storage
    if [[ -f "$DOKKU_ROOT/.couchdb/port_$APP" ]]; then
        rm -f "$DOKKU_ROOT/.couchdb/port_$APP"
    fi
    # Remove container root password
    if [[ -f "$DOKKU_ROOT/.couchdb/pwd_$APP" ]]; then
        rm -f "$DOKKU_ROOT/.couchdb/pwd_$APP"
    fi
    # Remove persistent volume
    if [[ -f "$DOKKU_ROOT/.couchdb/volume_$APP" ]]; then
        sleep 4
        rm -rf "$(cat $DOKKU_ROOT/.couchdb/volume_$APP)"
        rm -f "$DOKKU_ROOT/.couchdb/volume_$APP"
    fi
    echo
    echo "-----> couchdb container deleted: $DB_IMAGE"
    ;;

  couchdb:info)
    DB_IMAGE=couchdb/$APP
    if [[ ! -f "$DOKKU_ROOT/.couchdb/pwd_$APP" ]]; then
        echo "Unknown (or too old) couchdb container"
        exit 1
    fi
    echo
    echo "       Host: 172.17.42.1"
    echo "       Port: $(cat "$DOKKU_ROOT/.couchdb/port_$APP")"
    echo "       User: 'root'"
    echo "       Password: '$(cat "$DOKKU_ROOT/.couchdb/pwd_$APP")'"
    echo "       Database: 'db'"
    echo
    ;;

  couchdb:link)
    if $APP_EXISTS; then
        # Check argument
        if [[ -z $3 ]]; then
            echo "You must specify a database name"
            exit 1
        fi
        DB_IMAGE="couchdb/$3"
        if [[ ! -f "$DOKKU_ROOT/.couchdb/pwd_$APP" ]]; then
            echo "Database is not initialized correctly"
            exit 1
        fi
        DB_PASSWORD=$(cat "$DOKKU_ROOT/.couchdb/pwd_$APP")
        PORT=$(cat "$DOKKU_ROOT/.couchdb/port_$APP")
        # Link database using dokku command
        dokku config:set $APP "DATABASE_URL=mysql2://root:$DB_PASSWORD@172.17.42.1:$PORT/db"
        echo
        echo "-----> $APP linked to $DB_IMAGE database"
    fi
    ;;

  couchdb:logs)
    DB_IMAGE=couchdb/$APP
    ID=$(docker ps -a | grep "$DB_IMAGE" |  awk '{print $1}')
    docker logs $ID | tail -n 100
    ;;

  help)
    cat && cat<<EOF
    couchdb:create <app>     Create a couchdb container
    couchdb:delete <app>     Delete specified couchdb container
    couchdb:info <app>       Display database informations
    couchdb:link <app> <db>  Link an app to a couchdb database
    couchdb:logs <app>       Display last logs from couchdb container
EOF
    ;;

esac
